## Problem 1:
## # Prerequisite: Understand creating tables in SQL / collections in MongoDB
## # Problem: Create a `Customers` table / collection with the following fields: `id` (unique identifier), `name`, `email`, `address`, and `phone_number`.
CREATE TABLE customers (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(100),
    address VARCHAR(255),
    phone_number VARCHAR(100)
);

## Problem 2:

## # Prerequisite: Understand inserting data into SQL tables / MongoDB collections
## # Problem: Insert five rows / documents into the `Customers` table / collection with data of your choice.
insert into customers (name,email, address, phone_number)
values ("chunnu","chunnu@mail","delhi","9870")

insert into customers (name,email, address)
values ("vikash","vikasj@mail","delhi",)

insert into customers (name,email)
values ("ram","ram@mail");

insert into customers (name,email, address, phone_number)
values ("vivek","vivek@mail","delhi","4834");

insert into customers (name,email, address, phone_number)
values ("chandra","chandra@mail","delhi","9870");

## Problem 3:

## # Prerequisite: Understand basic data fetching in SQL / MongoDB
## # Problem: Write a query to fetch all data from the `Customers` table / collection.
select * from customers;

## Problem 4:

## # Prerequisite: Understand how to select specific fields in SQL / MongoDB
## # Problem: Write a query to select only the `name` and `email` fields for all customers.
select name, email from customers;

Problem 5:

## # Prerequisite: Understand basic WHERE clause in SQL / MongoDB's find method
## # Problem: Write a query to fetch the customer with the `id` of 3.
 select * from customers where id=3;

##  Problem 6:

## # Prerequisite: Understand using string patterns in SQL (LIKE clause) / using regex in MongoDB
## # Problem: Write a query to fetch all customers whose `name` starts with 'A'.
SELECT * FROM users WHERE name LIKE "A%";

## Problem 7:
## # Prerequisite: Understand how to order data in SQL / MongoDB
## # Problem: Write a query to fetch all customers, ordered by `name` in descending order.
SELECT name
FROM users
ORDER BY name DESC;

## Problem 8:
## # Prerequisite: Understand data updating in SQL / MongoDB
## # Problem: Write a query to update the `address` of the customer with `id` 4.
UPDATE users
SET address = "Jabalpur"
Where id = 4;

## Problem 9:
## # Prerequisite: Understand how to limit results in SQL / MongoDB
## # Problem: Write a query to fetch the top 3 customers when ordered by `id` in ascending order.
SELECT name
FROM users
ORDER BY name ASC
LIMIT 3;


## Problem 10:
## # Prerequisite: Understand data deletion in SQL / MongoDB
## # Problem: Write a query to delete the customer with `id` 2.
DELETE FROM users
where id = 2;

## Problem 11:
## # Prerequisite: Understand how to count rows / documents in SQL / MongoDB
## # Problem: Write a query to count the number of customers.
SELECT COUNT(*) from users;

## Problem 12:
## # Prerequisite: Understand how to skip rows / documents in SQL / MongoDB
## # Problem: Write a query to fetch all customers except the first two when ordered by `id` in ascending order.
SELECT id
FROM users
ORDER BY id ASC
LIMIT 2, 5;

## Problem 13:
## # Prerequisite: Understand filtering with multiple conditions in SQL / MongoDB
## # Problem: Write a query to fetch all customers whose `id` is greater than 4 and `name` starts with 'v'.
select * from customers where id > 4 and name like "v%";


## Problem 14:
## # Prerequisite: Understand how to use OR conditions in SQL / MongoDB
## # Problem: Write a query to fetch all customers whose `id` is less than 3 or `name` ends with 's'.
 select * from customers where id < 4 and name like "%u" ;


## Problem 15:
## # Prerequisite: Understand how to use NULL checks in SQL / MongoDB
## # Problem: Write a query to fetch all customers where the `phone_number` field is not set or is null.
select * from customers where phone_number is null;





























db.Customers.insertOne({'name':'sourabh','email':'s',phone:838383838})

db.Customers.insertMany([{'name':'a','email':'s',phone:838383838},{'name':'b','email':'s',phone:838383838},{'name':'c','email':'s',phone:838383838},{'name':'d','email':'s',phone:838383838},{'name':'e','email':'s',phone:838383838}])


db.Customers.find()

db.Customers.find({}, { name: 1, email: 1, _id: 0})

db.Customers.findOne({ _id: ObjectId("64a78537cecefc4ec0e2faea") })

db.Customers.find().sort({ name: -1 })

db.Customers.updateOne( { _id: ObjectId("64a78537cecefc4ec0e2fae6") }, { $set: { phone: 89 } })

db.Customers.find().sort({ _id: 1 }).limit(3)

db.Customers.deleteOne({ _id: ObjectId('64a78537cecefc4ec0e2fae7') })

db.Customers.count()

db.Customers.find().sort({ _id: 1 }).skip(2)

db.Customers.find({ id: { $gt: 2 }, name: /^B/ })

db.Customers.find({ $and: [ { _id: { $gt: ObjectId("64a78481cecefc4ec0e2fae5") } }, { name: /^c/ }] })

db.Customers.find({ $and: [ { _id: { $lt: ObjectId("64a78537cecefc4ec0e2fae8") } }, { name: /^s/ }] })

db.Customers.find({ $or: [ { phone: { $exists: false } }, { phone: null } ] })